/**
 * @file
 * Defines default strategy parameter values for the given timeframe.
 */

// Defines indicator's parameter values for the given pair symbol and timeframe.
struct Indi_HeikenAshi_Params_{{ Timeframe }} : HeikenAshiParams {
  Indi_HeikenAshi_Params_{{ Timeframe }}() : HeikenAshiParams(indi_ha_defaults, PERIOD_{{ Timeframe }}) { shift = {{ HeikenAshi_Indi_HeikenAshi_Shift | default(0) }}; }
} indi_ha_{{ Timeframe | lower }};

// Defines strategy's parameter values for the given pair symbol and timeframe.
struct Stg_HeikenAshi_Params_{{ Timeframe }} : StgParams {
  // Struct constructor.
  Stg_HeikenAshi_Params_{{ Timeframe }}() : StgParams(stg_ha_defaults) {
    lot_size = {{ HeikenAshi_LotSize | default(0) }};
    signal_open_method = {{ HeikenAshi_SignalOpenMethod | default(0) }};
    signal_open_filter_method = {{ HeikenAshi_SignalOpenFilterMethod | default(1) }};
    signal_open_level = (float){{ HeikenAshi_SignalOpenLevel | default(0) }};
    signal_open_boost = {{ HeikenAshi_SignalOpenBoostMethod | default(0) }};
    signal_close_method = {{ HeikenAshi_SignalCloseMethod | default(0) }};
    signal_close_level = (float){{ HeikenAshi_SignalCloseLevel | default(0) }};
    price_stop_method = {{ HeikenAshi_PriceStopMethod | default(0) }};
    price_stop_level = (float){{ HeikenAshi_SignalCloseLevel | default(1) }};
    tick_filter_method = {{ HeikenAshi_TickFilterMethod  | default(1) }};
    max_spread = {{ HeikenAshi_MaxSpread | default(0) }};
  }
} stg_ha_{{ Timeframe | lower }};
